"""
@author:Zhang Yue
@date  :2023/2/10:21:41
@IDE   :PyCharm
"""
# coding:utf-8
import os
import sys
import numpy as np
import rasterio as ras
from tqdm import tqdm
from osgeo import gdal

#读取每个tiff图像的属性信息
def Readxy(RasterFile):
    ds = gdal.Open(RasterFile,gdal.GA_ReadOnly)
    if ds is None:
        print ('Cannot open ',RasterFile)
        sys.exit(1)
    cols = ds.RasterXSize
    rows = ds.RasterYSize
    band = ds.GetRasterBand(1)
    # data = band.ReadAsArray(0,0,cols,rows)
    noDataValue = band.GetNoDataValue()
    projection=ds.GetProjection()
    geotransform = ds.GetGeoTransform()
    return rows,cols,geotransform,projection,noDataValue

# 写文件，写成tiff
def write_img(filename, im_proj, im_geotrans, im_data):
    # 判断栅格数据的数据类型
    if 'int8' in im_data.dtype.name:
        datatype = gdal.GDT_Byte
    elif 'int16' in im_data.dtype.name:
        datatype = gdal.GDT_UInt16
    else:
        datatype = gdal.GDT_Float32
    # 判读数组维数
    if len(im_data.shape) == 3:
        im_bands, im_height, im_width = im_data.shape
    else:
        im_bands, (im_height, im_width) = 1, im_data.shape
    # 创建文件
    driver = gdal.GetDriverByName("GTiff")  # 数据类型必须有，因为要计算需要多大内存空间
    dataset = driver.Create(filename, im_width, im_height, im_bands, datatype)
    dataset.SetGeoTransform(im_geotrans)  # 写入仿射变换参数
    dataset.SetProjection(im_proj)  # 写入投影
    if im_bands == 1:
        dataset.GetRasterBand(1).WriteArray(im_data)  # 写入数组数据
    else:
        for i in range(im_bands):
            dataset.GetRasterBand(i + 1).WriteArray(im_data[i])
    del dataset

def time_series_test(inputpath, outputPath):
    # inputpath:影像的存储路径
    # outputPath:影像的保存路径
    filepaths = []
    for file in os.listdir(inputpath):
        filepath1 = os.path.join(inputpath, file)
        filepaths.append(filepath1)
    # 获取影像数量
    num_images = len(filepaths)
    # 读取影像数据
    img1 = ras.open(filepaths[0])
    # 获取影像的投影，高度和宽度
    transform1 = img1.transform
    height1 = img1.height
    width1 = img1.width
    array1 = img1.read()
    img1.close()

    # 这一个没有参与运算，主要为了读取它的行列数、投影信息、坐标系和noData值
    rows, cols, geotransform, projection, noDataValue = Readxy(filepaths[0])
    print(rows, cols, geotransform, projection, noDataValue)

    # 读取所有影像
    for path1 in filepaths[1:]:
        if path1[-4:] == '.tif':
            print(path1)
            img2 = ras.open(path1)
            array2 = img2.read()
            array1 = np.vstack((array1, array2))
            img2.close()
    nums, width, height = array1.shape
    print(width, height)

    # 定义一个输出矩阵，可以将结果保存在此矩阵，无值区用-9999填充
    result = np.full([width, height], -9999.0000)
    result2 = np.full([width, height], -9999.0000)

    # 只有有值的区域才进行时间序列计算
    c1 = np.isnan(array1)
    sum_array1 = np.sum(c1, axis=0)
    nan_positions = np.where(sum_array1 == num_images)
    positions = np.where(sum_array1 != num_images)

    # 输出总像元数量
    print("all the pixel counts are {0}".format(len(positions[0])))

    # 时间序列运算
    for i in tqdm(range(len(positions[0]))):
    # for i in tqdm(range(15000132, 15000134)):
        # print(i)
        x = positions[0][i]
        y = positions[1][i]
        time_series_list = array1[:, x, y]

        # ******************时间序列运算开始的地方**********************#
        # 逐个时间序列进行计算，此处可以替换为需要的规则
        # 此处可以添加判断条件和运算规则
        Ut, max_idx, Kt = pettitt(time_series_list)

        # a = time_series_list[1]
        # b = time_series_list[2]
        # 将逐个时间序列运算的结果存在空的np数组中
        result[x, y] = max_idx + 2000
        # result2[x, y] = max_idx + 2000
        # ******************时间序列运算结束的地方**********************#
    result_save_path = os.path.join(outputPath, "result.tif")
    # result2_save_path = os.path.join(outputPath, "theLastMutationalSite.tif")

    write_img(result_save_path, projection, geotransform, result)
    # write_img(result2_save_path, projection, geotransform, result2)

def pettitt(X):
    # second one
    U = [];
    s = 0
    U.append(sum(np.sign(X[0] - np.array(X[:]))))
    for t in range(1, len(X)):
        v_t = sum(np.sign(X[t] - np.array(X[:])))
        U.append(U[t - 1] + v_t)
    Kt = max(np.abs(U))
    max_idx = list(np.abs(U)).index(max(np.abs(U)))
    return U, max_idx, Kt

print("Start")
# 数据输入路径
input_path = r"E:\\RemoteSensing\\XYKH\\【python】MK突变检测\\inputdata\\vi\\"
# 结果数据保存路径
output_path = r"E:\\RemoteSensing\\XYKH\\【python】MK突变检测\\outputdata\\"
# 运行程序
time_series_test(input_path, output_path)
print("MK Finish")
